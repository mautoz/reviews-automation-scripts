
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * <command to execute>

# Coloque aqui o caminho para a pasta que está o script 'run'
SCRAPER_PATH=<caminho-do-run>


# As três linhas deste bloco de comentários são usadas caso queira automatizar o backup do BD.
# Caso queria que funcione, remove os comentários e preencha a senha do PGPASSWORD
# com a senha do seu bd.
# No exemplo, o back será feito todos os dias às 21hs.
# PGPASSWORD=senha_para_postgres
# HOJE=date +%Y%m%d%H%M
# 0 21 * * * pg_dump reviews-classifier > $($HOJE)_kos.sql.bkp


# Esta tarefa deve rodar antes da tarefa abaixo, pois aqui iniciamos o Google API
# para então realizar o scraper abaixo. No exemplo, eu inicio o Google API às 23:07
# para então, às 23:09, iniciar o scraper. 
7 23 * * * ${SCRAPER_PATH}/run_google


# Roda o script para atualizar o log que fornece o número de linhas de reviews
# e de palavras chaves. Útil para ter controle das atualizações que são feitas 
# no bd e verificar se alguém reportou algum erro! Aqui, executa às 23:09. 
9 23 * * * ${SCRAPER_PATH}/run

